/**
 * File:	clients/inst_fcoe-client.ycp
 * Package:	Configuration of fcoe-client
 * Summary:	Main file
 * Authors:	Gabriele Mohr <gs@suse.de> 
 *
 *
 * File called in installation workflow for fcoe-client configuration.
 */

{

/***
 * <h3>Configuration of fcoe-client</h3>
 */

textdomain "fcoe-client";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("FCoEClient module started");

import "Progress";
import "Report";
import "Summary";
import "ModuleLoading";
import "PackagesProposal";
import "Installation";
import "String";
import "FcoeClient";
import "NetworkService";

include "fcoe-client/wizards.ycp";

/* main ui function */
any ret = nil;
boolean success = false;

y2milestone("fcoe-client module started during installation");

// create /etc/fcoe
SCR::Execute(.target.bash, "mkdir -p /etc/fcoe" );


// TODO: check what is additional needed 
//       - load any modules ?
//	  
// FcoeClient::CheckInstalledPackages() not needed in inst-sys
// FcoeClient::DetectStartStatus()	doesn't make sense in inst-sys

// TODO: check for running network - makes sense here ???
if( !NetworkService::RunningNetworkPopup() )
{
    y2error( "Network NOT set up" );
    return nil;
}

// start services fcoe and lldpad
success = FcoeClient::ServiceStatus();
if ( !success )
{
    y2error( "Starting of services FAILED" );
    return nil;
}

// detect netcards
success = FcoeClient::DetectNetworkCards(); 
if ( !success )
{
    y2error( "Detecting netcards FAILED" );
    return nil;
}

// read general FCoE settings
success = FcoeClient::ReadFcoeConfig();
if ( !success )
{
    y2error( "Reading /etc/fcoe/config FAILED" );
    return nil;
}

// run dialog
ret = MainSequence();
y2milestone("MainSequence ret=%1", ret);

// add package open-fcoe to pool that is then used by software proposal
// to propose a selection
PackagesProposal::AddResolvables( "fcoe", `package, ["open-fcoe"] );

// workflow not aborted
if ( ret == `next )
{
    // write changes to config files
    FcoeClient::WriteFcoeConfig();
    FcoeClient::WriteCfgFiles();
    FcoeClient::RestartServiceFcoe();
}

/* Finish */
y2milestone("fcoe-client module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
