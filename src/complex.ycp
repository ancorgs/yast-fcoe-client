/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/fcoe-client/complex.ycp
 * Package:	Configuration of fcoe-client
 * Summary:	Dialogs definitions
 * Authors:	Gabriele Mohr <gs@suse.de>
 *
 */

{

textdomain "fcoe-client";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "FcoeClient";


include "fcoe-client/helps.ycp";
include "fcoe-client/dialogs.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return FcoeClient::Modified();
}

boolean ReallyAbort() {
    return !FcoeClient::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // FcoeClient::SetAbortFunction(PollAbort);
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = FcoeClient::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    y2milestone( "Writing configuration" );
    // FcoeClient::SetAbortFunction(PollAbort);
    boolean ret = FcoeClient::Write();
    return ret ? `next : `abort;
}

/**
 * Init
 **/
void InitServicesDialog (string id) {
    y2milestone( "Init services dialog" );
}

//
//
//
boolean GetFCoEStatus( string interface )
{
    boolean ret = true;
    string vlan_interface = "";
    string command = sformat( "sed -n 's/\\([^ ]*\\) *.*%1/\\1/p' /proc/net/vlan/config", interface );
    y2milestone( "Executing command: %1", command );

    map output = (map)SCR::Execute( .target.bash_output, command );
    y2milestone( "Output: %1", output );	
    vlan_interface = output["stdout"]:"";

    if (vlan_interface != "")
    {
	y2milestone( "VLAN channel %1 found, reading /etc/fcoe/cfg-%1", vlan_interface );
	
    }
    else
    {
	y2milestone( "Nothing configured for %1", interface );
	ret = false;
    }

    return ret;
}

void InitInterfacesDialog (string id) {
    y2milestone( "Init interfaces dialog" );

    list <map> netcards = (list<map>)SCR::Read(.probe.netcard);
    y2milestone( "Detected netcards: %1", netcards );
    
    list <term> table_items = [];
    integer row = 0;
    boolean fcoe_status = false;
    
    foreach ( map card, netcards, {
	    fcoe_status = GetFCoEStatus( card["dev_name"]:"" );
	    table_items = add( table_items, `item(`id(row), card["dev_name"]:"", card["device"]:"" ) );
	    row = row + 1;
	});
	      
    UI::ChangeWidget( `id(`interfaces), `Items, table_items );
    
}


void InitConfigurationDialog (string id) {
    y2milestone( "Init configuration dialog" );
}
     
/**
 * Handle
 **/
symbol HandleServicesDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleInterfacesDialog( string id, map event )
{
     any action = event["ID"]:nil;

     if ( action == `edit )
     {
	 y2milestone( "Action: %1, returning `edit", action);
	 return `edit;
     }

     return nil;
}

symbol HandleConfigurationDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

/**
 * Store
 **/

void StoreServicesDialog (string id, map event) {
 y2milestone( "Store services dialog" );
}

void StoreInterfacesDialog (string id, map event) {
 y2milestone( "Store interfaces dialog" );
}

void StoreConfigurationDialog (string id, map event) {
 y2milestone( "Store configuration dialog" );
}

/* EOF */
}
