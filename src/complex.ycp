/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/fcoe-client/complex.ycp
 * Package:	Configuration of fcoe-client
 * Summary:	Dialogs definitions
 * Authors:	Gabriele Mohr <gs@suse.de>
 *
 */

{

textdomain "fcoe-client";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "FcoeClient";
import "Service";
import "Stage";
import "FileUtils";

include "fcoe-client/helps.ycp";
include "fcoe-client/dialogs.ycp";

/**
 * Show a popup on abort if data are modified and
 * check list of commands to revert changes done to the system.
 * This function is also called during installation if user aborts
 * the 'FCoE client configuration', i.e. commands from revert list
 * are executed and list is reset.
 * @return true if users aborts installation
 */
boolean ReallyAbort() {
    y2milestone( "Aborting FCoE configuration" );

    // revert start of 'fcoe' or 'lldpad' 
    if ( FcoeClient::fcoe_started && !Service::Enabled( "boot.fcoe" ) )
    {
	Service::Stop( "boot.fcoe" );
    }
    if ( FcoeClient::lldpad_started && !Service::Enabled( "boot.lldpad" ) )
    {
	Service::Stop( "boot.lldpad" );
    }
    
    if ( !FcoeClient::Modified() )
	return true;

    boolean abort = Popup::ReallyAbort(true);

    if ( abort )
    {
	// check revert list
	list revert_list = FcoeClient::GetRevertCommands();
	if ( revert_list == [] )
	{
	    y2milestone( "Nothing to revert");
	}
	else
	{
	    foreach ( string command, (list<string>)revert_list, {
		    y2milestone( "Calling %1", command );
		    map output = (map)SCR::Execute( .target.bash_output, command );
		    y2milestone( "Output: %1", output );
		    if ( output["exit"]:255 != 0 )
		    {
			// text of an error popup
			Popup::Error( sformat( _("Cannot remove the FCoE interface.
Command %1 failed."), command ) );
		    }
		} );
	    FcoeClient::ResetRevertCommands(); // important during installation
	}
    }
    return abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");

    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = FcoeClient::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    y2milestone( "Writing configuration" );

    boolean ret = FcoeClient::Write();
    return ret ? `next : `abort;
}

/**
 * Init
 **/
void InitServicesDialog (string id) {
    y2milestone( "Init services dialog" );
    y2milestone( "Data modified: %1", FcoeClient::Modified() );
    map status_map = FcoeClient::GetStartStatus();

    if ( status_map["fcoe"]:false == true )
    {
	UI::ChangeWidget( `id( "fcoe_startup_auto" ), `Value, true );
	UI::ChangeWidget( `id( "fcoe_startup_manual" ), `Value, false );
    }
    else
    {
	UI::ChangeWidget( `id( "fcoe_startup_auto" ), `Value, false );
	UI::ChangeWidget( `id( "fcoe_startup_manual" ), `Value, true );	
    }

    if ( status_map["lldpad"]:false == true )
    {
	UI::ChangeWidget( `id( "lldpad_startup_auto" ), `Value, true );
	UI::ChangeWidget( `id( "lldpad_startup_manual" ), `Value, false );
    }
    else
    {
	UI::ChangeWidget( `id( "lldpad_startup_auto" ), `Value, false );
	UI::ChangeWidget( `id( "lldpad_startup_manual" ), `Value, true );	
    }
}

//
// Adjust buttons, means set 'Change Settings' and 'Create VLAN' sensitive or insensitive
//
void AdjustButtons()
{
    map card = FcoeClient::GetCurrentNetworkCard();

    // check VLAN status 
    if ( card["fcoe_vlan"]:"" == FcoeClient::NOT_CONFIGURED )
    {
	UI::ChangeWidget( `id(`edit), `Enabled, true );
	UI::ChangeWidget( `id(`create), `Enabled, true );
	UI::ChangeWidget( `id(`remove), `Enabled, false );
    }
    else if ( card["fcoe_vlan"]:"" == FcoeClient::NOT_AVAILABLE )
    {
	UI::ChangeWidget( `id(`edit), `Enabled, false );
	UI::ChangeWidget( `id(`create), `Enabled, false );
	UI::ChangeWidget( `id(`remove), `Enabled, false );
    }
    else
    {
	UI::ChangeWidget( `id(`edit), `Enabled, true );
	UI::ChangeWidget( `id(`create), `Enabled, false );
	UI::ChangeWidget( `id(`remove), `Enabled, true );
    }
}


void InitInterfacesDialog (string id) {
    y2milestone( "Init interfaces dialog" );
    string vlan_interface = "";
    integer row = 0;
    
    list <map> netcards = FcoeClient::GetNetworkCards();
    y2milestone( "Got netcards: %1", netcards );
    
    list <term> table_items = [];
    
    foreach ( map card, (list<map>)netcards, {
	    table_items = add( table_items,
			       `item(`id(row), card["dev_name"]:"", card["mac_addr"]:"", card["device"]:"", card["fcoe_vlan"]:"",
				     card["fcoe_enable"]:"", card["dcb_required"]:"", card["auto_vlan"]:"", card["dcb_capable"]:"" )
			       );
	    row = row + 1;
	});
	      
    UI::ChangeWidget( `id(`interfaces), `Items, table_items );
    // set current item 
    UI::ChangeWidget( `id(`interfaces), `CurrentItem, `id(0) );
    FcoeClient::current_card = 0;
    
    AdjustButtons();
}

//
//
//
void InitConfigurationDialog (string id) {
    y2milestone( "Init configuration dialog" );

    map <string, string> fcoe_config = FcoeClient::GetFcoeConfig();
    y2milestone( "Fcoe configuration %1", fcoe_config  );

    if ( fcoe_config!= $[] )
    {	
	if ( fcoe_config["DEBUG"]:"" == "yes" )
	    UI::ChangeWidget(`id("debug"), `Value, "yes" );
	else
	    UI::ChangeWidget(`id("debug"), `Value, "no" );

	if ( fcoe_config["USE_SYSLOG"]:"" == "yes" )
	    UI::ChangeWidget(`id("syslog"), `Value, "yes" );
	else
	    UI::ChangeWidget(`id("syslog"), `Value, "no" );   
    }
}

//
// InitEditDialog
//
void InitEditDialog( string id )
{
    y2milestone( "Init edit dialog" );
    list <map> cards = FcoeClient::GetNetworkCards();
    map card = cards[FcoeClient::current_card]:$[];

    // set values for 'FCoE Enabled' and 'DCB Required'
    UI::ChangeWidget( `id(`fcoe), `Value, card["fcoe_enable"]:"" );
    UI::ChangeWidget( `id(`dcb), `Value, card["dcb_required"]:"" );
    UI::ChangeWidget( `id(`auto), `Value, card["auto_vlan"]:"" );
    if ( card["fcoe_vlan"]:"" != FcoeClient::NOT_CONFIGURED )
    {
	// don't allow to change AUTO_VLAN for a configured interface
	// (would require new /etc/fcoe/cfg-file)
	UI::ChangeWidget( `id(`auto), `Enabled, false );	
    }
    // headline of the edit dialog - configuration of values for a certain network interface
    UI::ChangeWidget( `id(`heading), `Value, sformat( _("Configuration of Interface %1"), card["fcoe_vlan"]:"" ) );
}

/**
 * Handle
 **/
symbol HandleServicesDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleInterfacesDialog( string id, map event )
{
    any action = event["ID"]:nil;
     
    y2milestone( "Event: %1", event );
     
    if ( action == `edit )
    {
	y2milestone( "Action: %1, returning %1", action);
	return `edit;
    }
    else if ( action == `interfaces )
    {
	FcoeClient::current_card = (integer)UI::QueryWidget( `id(`interfaces), `CurrentItem );
	AdjustButtons();
    }
    else if ( action == `create )
    {
	// haendel:~/:[0]# fipvlan -c -s eth3
        // Fibre Channel Forwarders Discovered
	// interface       | VLAN | FCF MAC          
	// ------------------------------------------
	// eth3            | 200  | 00:0d:ec:a2:ef:00
	// Created VLAN device eth3.200
	// Starting FCoE on interface eth3.200

	map card = FcoeClient::GetCurrentNetworkCard();
	string dev_name = card["dev_name"]:"";

	string command = "";
	map output = $[];	 
	string fcoe_vlan_interface = "";
	map status_map = $[];

	string ifcfg_file = sformat( "/etc/sysconfig/network/ifcfg-%1\.%2", dev_name, card["vlan_interface"]:"" );

	// headline of a popup: creating and starting Fibre Channel over Ethernet
	boolean ret = Popup::YesNoHeadline( _("Creating and starting FCoE on detected VLAN device"),
					    // question to the user: really create and start FCoE
					    sformat( _("Do you really want to create a FCoE network
interface for discovered FCoE VLAN interface
on %1 and start the FCoE initiator?"), dev_name ) );
	if ( ret == true )
	{
	    if ( Stage::initial() )	// first stage of installation - create and start FCoE VLAN interface
	    {
		// create and start FCoE e.g. 'fipvlan -c -s eth3'
		command = sformat( "fipvlan -c -s %1", dev_name );
		y2milestone( "Executing command: %1", command );
		output = (map)SCR::Execute( .target.bash_output, command );
		y2milestone( "Output: %1", output );
	 
		if ( output["exit"]:255 != 0 )
		{
		    // text of an error popup
		    Popup::Error( sformat( _("Cannot create and start FCoE on %1"), dev_name ) ); 
		    return nil;
		}
	    }
	    else	// installed system - if VLAN already exists only start FCoE
	    {
		// create and start FCoE
		command = sformat( "fipvlan -c -s %1", dev_name );

                // if /etc/sysconfig/network/ifcfg-<if>.<vlan> already exists
		// call 'ifup' for the interface (creates /proc/net/vlan/<if>.<vlan>)
		if ( FileUtils::Exists( ifcfg_file ) ) 
		{						 
		    string cmd_ifup = sformat( "ifup %1\.%2", dev_name, card["vlan_interface"]:"" );
		    y2milestone( "Executing command: %1", cmd_ifup );
		    output = (map)SCR::Execute( .target.bash_output, cmd_ifup );
		    y2milestone( "Output: %1", output );

		    if ( output["exit"]:255 == 0 )
		    {
			// only start FCoE
			command = sformat( "fipvlan -s %1", dev_name );
		    }
		}

		y2milestone( "Executing command: %1", command );
		output = (map)SCR::Execute( .target.bash_output, command );
		y2milestone( "Output: %1", output );
		if ( output["exit"]:255 != 0 )
		{
                    if ( !FcoeClient::TestMode() )
                    {
                        // text of an error popup: command failed on the network interface 
                        Popup::Error( sformat( _("Command \"%1\" on %2 failed."), command, dev_name ) );
                        return nil;
                    }
                    else
                    {
                        Popup::Warning( _("Creating FCoE interface failed.
Continue because running in test mode") );
                    }
		}
	    }
	}
	else
	{
	    y2milestone( "Starting FCoE canceled" );
	    return nil;
	} 	

	// Get values and exchange list (table) entries

        if ( card["vlan_interface"]:"" == "0" )
        {
             // for VLAN interface "0" there isn't an entry in /proc/net/vlan/config
            fcoe_vlan_interface =  card["dev_name"]:"" ;
        }
        else  // get interface from /proc/net/vlan/config
        {
            fcoe_vlan_interface = FcoeClient::GetFcoeVlanInterface( card["dev_name"]:"", card["vlan_interface"]:"" );
        }

	if ( fcoe_vlan_interface != "" )
	{
	    y2milestone( "FCoE VLAN interface %1 created/started", fcoe_vlan_interface );
	    // write config for FCoE VLAN interface
	    FcoeClient::CreateFcoeConfig( fcoe_vlan_interface, card );
	    status_map = FcoeClient::GetFcoeStatus ( fcoe_vlan_interface, card["dev_name"]:"" );
	   
	    // command to be able to revert the creation of FCoE VLAN interface in case of 'Cancel'
	    // FcoeClient::AddRevertCommand( sformat("fcoeadm -d %1 && vconfig rem %2", status_map["cfg_device"]:"", fcoe_vlan_interface ) );
	    // 'fcoeadm -d <if>/<if>.<vlan>' fails here, 'vconfig rem <if>.<vlan>' succeeds
	    // and removes the interface properly (tested on RC1)
	    FcoeClient::AddRevertCommand( sformat("vconfig rem %1", fcoe_vlan_interface ) );
	}
	else
	{
	    fcoe_vlan_interface = FcoeClient::NOT_CONFIGURED;
	}

	// set new values in global map network_interfaces
	card["fcoe_vlan"] = fcoe_vlan_interface;
	card["fcoe_enable"] = status_map["FCOE_ENABLE"]:"";
	card["dcb_required"] = status_map["DCB_REQUIRED"]:"";
	card["auto_vlan"] = status_map["AUTO_VLAN"]:"";
	card["cfg_file"] = status_map["cfg_device"]:"";
	FcoeClient::SetModified( true );
		
	FcoeClient::SetNetworkCardsValue( FcoeClient::current_card, card );
	y2milestone( "Current network interfaces: %1", FcoeClient::GetNetworkCards() );
	    
	// replace values in table 
	UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 3), fcoe_vlan_interface );
	UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 4), status_map["FCOE_ENABLE"]:"" );
	UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 5), status_map["DCB_REQUIRED"]:"" );
	UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 6), status_map["AUTO_VLAN"]:"" );
	AdjustButtons();
    }
    else if ( action == `remove )
    {
	map card = FcoeClient::GetCurrentNetworkCard();
	map output = $[];
	string command = "";
	// popup text: really remove FCoE VLAN interface
	string popup_text =  sformat( _("Do you really want to remove the FCoE interface %1?"),
					card["fcoe_vlan"]:"" );

	if ( !Stage::initial() )
	{
	    // popup text continues 
	    popup_text = popup_text + "\n" + _("Attention:
Make sure the interface is not essential for a used device.
Removing it may result in an unusable system.");
	}
	else
	{
	    // popup text continues
	     popup_text = popup_text + "\n" + _("Don't remove the interface if it's related
to an already activated multipath device.");
	}
	
	boolean ret = Popup::AnyQuestion( Label::WarningMsg(),
					  popup_text,
					  Label::ContinueButton(),
					  Label::CancelButton(),
					  `focus_no );	// default: Cancel
	
	if ( ret == true )
	{
	    y2milestone( "Removing %1",  card["fcoe_vlan"]:"" );

	    // call fcoeadm -d <fcoe_vlan> first (bnc #719443)
	    command = sformat( "fcoeadm -d %1", card["cfg_file"]:"") ;
	    y2milestone( "Calling %1", command );
	    output = (map)SCR::Execute( .target.bash_output, command );
	    y2milestone( "Output: %1", output );

	    if ( output["exit"]:255 == 0 )
	    {
		command = sformat( "vconfig rem %1", card["fcoe_vlan"]:"") ;
		y2milestone( "Calling %1", command );
		output = (map)SCR::Execute( .target.bash_output, command );
		y2milestone( "Output: %1", output );

		if ( output["exit"]:255 == 0 )
		{
		    command = sformat( "rm /etc/fcoe/cfg-%1", card["cfg_file"]:"" );
		    y2milestone( "Calling %1", command );
		    output = (map)SCR::Execute( .target.bash_output, command );
		    y2milestone( "Output: %1", output );
		    command = sformat( "rm /etc/sysconfig/network/ifcfg-%1", card["fcoe_vlan"]:"" );
		    y2milestone( "Calling %1", command );
		    output = (map)SCR::Execute( .target.bash_output, command );
		    y2milestone( "Output: %1", output );
		
		    // set new values in global map network_interfaces
		    card["fcoe_vlan"] = FcoeClient::NOT_CONFIGURED;
		    card["fcoe_enable"] = "yes";
		    // exception for Broadcom cards: DCB_REQUIRED should be set to "no" (bnc #728658)
		    card["dcb_required"] = ((card["driver"]:"" != "bnx2x") && (card["dcb_capable"]:""=="yes"))?"yes":"no";
		    card["auto_vlan"] = "yes"; // default is "yes" (bnc #724563)
		    card["cfg_file"] = "";
		    FcoeClient::SetModified( true );

		    FcoeClient::SetNetworkCardsValue( FcoeClient::current_card, card );
		    y2milestone( "Current network interfaces: %1", FcoeClient::GetNetworkCards() );
	    
		    // replace values in table 
		    UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 3), card["fcoe_vlan"]:"" );
		    UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 4), card["fcoe_enable"]:"" );
		    UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 5), card["dcb_required"]:"" );
		    UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 6), card["auto_vlan"]:"" );
		    AdjustButtons();
		}
		else
		{
		    Popup::Error( sformat( _("Removing of interface %1 failed"), card["fcoe_vlan"]:"") );
		    y2error( "Removing of interface %1 failed", card["fcoe_vlan"]:"" );
		}	
	    }
	    else
	    {
		Popup::Error( sformat( _("Destroying interface %1 failed."), card["fcoe_vlan"]:"") );
		y2error( "Destroying interface %1 failed", card["fcoe_vlan"]:"" );
	    }
	}
    }

    return nil;
}

symbol HandleConfigurationDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleEditDialog( string id, map event )
{
     any action = event["ID"]:nil;
     map card = FcoeClient::GetCurrentNetworkCard();

     if ( action == `dcb )
     {
	 string dcb_required = (string)UI::QueryWidget( `id(`dcb), `Value );
	 if ( dcb_required == "yes" && card["dcb_capable"]:"" != "yes" )
	 {	 
	     // text of a warning popup
	     Popup::Warning( _("DCB Required is set to \"yes\" but the
interface isn't DCB capable") );
	     y2warning( "DCB_REQUIRED is set to yes but the interface isn't DCB capable" );
	 }
     }
}

/**
 * Store
 **/

void StoreServicesDialog (string id, map event)
{
    y2milestone( "Store services dialog" );

    boolean fcoe_auto = (boolean)UI::QueryWidget( `id ("fcoe_startup_auto"), `Value );
    FcoeClient::SetStartStatus( "fcoe", fcoe_auto );

    y2milestone ("Setting auto start of service 'fcoe' to: %1", fcoe_auto );
    
    boolean lldpad_auto = (boolean)UI::QueryWidget( `id ("lldpad_startup_auto"), `Value );

    if ( fcoe_auto && !lldpad_auto )
    {
	// text of an information (notify)  popup
	Popup::Notify( _( "Service 'fcoe' requires enabled service 'lldpad'.
Enabling start on boot of service 'lldpad'." ) );
	lldpad_auto = true;
    }
    
    FcoeClient::SetStartStatus( "lldpad", lldpad_auto );
    y2milestone( "Setting auto start of service 'lldpad' to: %1", lldpad_auto );
}

void StoreInterfacesDialog (string id, map event)
{
    y2milestone( "Store interfaces dialog" );
}

void StoreConfigurationDialog (string id, map event)
{
    y2milestone( "Store configuration dialog" );

    map config = FcoeClient::GetFcoeConfig();
    
    string debug_val = (string)UI::QueryWidget( `id("debug"), `Value );
    if ( config["DEBUG"]:"" != debug_val)
    {
	FcoeClient::SetFcoeConfigValue( "DEBUG", debug_val );
	FcoeClient::SetModified( true );
    }
    string syslog_val = (string)UI::QueryWidget( `id("syslog"), `Value );

    if ( config["USE_SYSLOG"]:"" != syslog_val )
    {
	FcoeClient::SetFcoeConfigValue( "USE_SYSLOG", syslog_val );
	FcoeClient::SetModified( true );
    }
}

void StoreEditDialog (string id, map event)
{
    y2milestone( "Store edit dialog" );
    
    map card = FcoeClient::GetCurrentNetworkCard();

    string fcoe_enabled = (string)UI::QueryWidget( `id(`fcoe), `Value );
    if ( card["fcoe_enable"]:"" != fcoe_enabled )
    {
	card["fcoe_enable"] = fcoe_enabled;
	FcoeClient::SetModified( true );
    }

    string dcb_required = (string)UI::QueryWidget( `id(`dcb), `Value );
    if ( card["dcb_required"]:"" != dcb_required )
    {
	card["dcb_required"] = dcb_required;
	FcoeClient::SetModified( true );
    }

    string auto_vlan = (string)UI::QueryWidget( `id(`auto), `Value );
    if ( card["auto_vlan"]:"" != auto_vlan )
    {
	card["auto_vlan"] = auto_vlan;
	FcoeClient::SetModified( true );
    }
    
    FcoeClient::SetNetworkCardsValue( FcoeClient::current_card, card );

    y2milestone( "Current data: %1", FcoeClient::GetNetworkCards() );
}

/* EOF */
}
