/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/fcoe-client/complex.ycp
 * Package:	Configuration of fcoe-client
 * Summary:	Dialogs definitions
 * Authors:	Gabriele Mohr <gs@suse.de>
 *
 */

{

textdomain "fcoe-client";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "FcoeClient";


include "fcoe-client/helps.ycp";
include "fcoe-client/dialogs.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return FcoeClient::Modified();
}

boolean ReallyAbort() {
    return !FcoeClient::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // FcoeClient::SetAbortFunction(PollAbort);
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = FcoeClient::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    y2milestone( "Writing configuration" );
    // FcoeClient::SetAbortFunction(PollAbort);
    boolean ret = FcoeClient::Write();
    return ret ? `next : `abort;
}

/**
 * Init
 **/
void InitServicesDialog (string id) {
    y2milestone( "Init services dialog" );
}

//
// Get current network interface (netcard)
//
list GetCurrentNetcard()
{
    list card = [];
    
    map <integer, list> netcards = FcoeClient::GetNetworkCards();
    integer row = (integer)UI::QueryWidget( `id(`interfaces), `CurrentItem );
    card = netcards[row]:[];
    y2milestone( "Current row: %1 card: %2", row, card );
    
    return card;
}

//
// Adjust buttons, means set 'Change Settings' and 'Create VLAN' sensitive or insensitive
//
void AdjustButtons()
{
    list card = GetCurrentNetcard();

    // check VLAN status 
    if ( card[2]:"" == FcoeClient::NOT_CONFIGURED )
    {
	UI::ChangeWidget( `id(`edit), `Enabled, false );
	UI::ChangeWidget( `id(`create), `Enabled, true );
    }
    else
    {
	UI::ChangeWidget( `id(`edit), `Enabled, true );
	UI::ChangeWidget( `id(`create), `Enabled, false );
    }
}


void InitInterfacesDialog (string id) {
    y2milestone( "Init interfaces dialog" );
    string vlan_interface = "";
    
    map <integer, list> netcards = FcoeClient::GetNetworkCards();
    y2milestone( "Got netcards: %1", netcards );
    
    list <term> table_items = [];
    
    foreach ( integer row, list card, netcards, {
	    table_items = add( table_items,
			       `item(`id(row), card[0]:"", card[1]:"", card[2]:"",
				     card[3]:"", card[4]:"", card[5]:"" )
			       );
	});
	      
    UI::ChangeWidget( `id(`interfaces), `Items, table_items );
    UI::ChangeWidget( `id(`interfaces), `CurrentItem, `id(0) );
    FcoeClient::current_card = 0;
    
    AdjustButtons();
}

//
//
//
void InitConfigurationDialog (string id) {
    y2milestone( "Init configuration dialog" );

    list <string> options = (list<string>) SCR::Dir(.fcoe);
    y2milestone( "List of options: %1", options );

    if ( options != [] )
    {	
	string debug_val = (string)SCR::Read(add(.fcoe, "DEBUG"));
	string syslog_val = (string)SCR::Read(add(.fcoe, "SYSLOG"));

	if ( debug_val == "yes" )
	    UI::ChangeWidget(`id("debug"), `Value, "yes" );
	else
	    UI::ChangeWidget(`id("debug"), `Value, "no" );

	if ( syslog_val == "yes" )
	    UI::ChangeWidget(`id("syslog"), `Value, "yes" );
	else
	    UI::ChangeWidget(`id("syslog"), `Value, "no" );   
    }
    else
    {
	y2error( "Cannot read /etc/fcoe/config");
    }
}

//
// InitEditDialog
//
void InitEditDialog( string id )
{
    y2milestone( "Init edit dialog" );
    map <integer, list> cards = FcoeClient::GetNetworkCards();
    list card = cards[ FcoeClient::current_card ]:[];

    // set values for 'FCoE Enabled' and 'DCB Required'
    UI::ChangeWidget( `id(`fcoe), `Value, card[4]:"" );
    UI::ChangeWidget( `id(`dcb), `Value, card[5]:"" );
}

/**
 * Handle
 **/
symbol HandleServicesDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleInterfacesDialog( string id, map event )
{
     any action = event["ID"]:nil;

     y2milestone( "Event: %1", event );
     
     if ( action == `edit )
     {
	 y2milestone( "Action: %1, returning %1", action);
	 return `edit;
     }
     else if ( action == `interfaces )
     {
	 FcoeClient::current_card = (integer)UI::QueryWidget( `id(`interfaces), `CurrentItem );
	 AdjustButtons();
     }
     else if ( action == `create )
     {
	 list card = (list)GetCurrentNetcard();
	 string dev_name = card[0]:"";
	 boolean ret = Popup::YesNoHeadline( _("Creating VLAN Interface"),
					     sformat( _("Do you really want to create
 a VLAN Interface on %1?"), dev_name ) );
	 if ( ret == true )
	 {
	     string command = sformat( "fipvlan -c -s %1", dev_name );
	     y2milestone( "Executing command: %1", command );
	 }
	 else
	 {
	     y2milestone( "Creating VLAN interface canceled" );
	 }
     }

     return nil;
}

symbol HandleConfigurationDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleEditDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

/**
 * Store
 **/

void StoreServicesDialog (string id, map event) {
 y2milestone( "Store services dialog" );
}

void StoreInterfacesDialog (string id, map event) {
 y2milestone( "Store interfaces dialog" );
}

void StoreConfigurationDialog (string id, map event) {
 y2milestone( "Store configuration dialog" );
}

void StoreEditDialog (string id, map event) {
 y2milestone( "Store edit dialog" );
}

/* EOF */
}
