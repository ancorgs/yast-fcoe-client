/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/fcoe-client/complex.ycp
 * Package:	Configuration of fcoe-client
 * Summary:	Dialogs definitions
 * Authors:	Gabriele Mohr <gs@suse.de>
 *
 */

{

textdomain "fcoe-client";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "FcoeClient";
import "Service";


include "fcoe-client/helps.ycp";
include "fcoe-client/dialogs.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return FcoeClient::Modified();
}

boolean ReallyAbort() {
    return !FcoeClient::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // FcoeClient::SetAbortFunction(PollAbort);
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = FcoeClient::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    y2milestone( "Writing configuration" );
    // FcoeClient::SetAbortFunction(PollAbort);
    boolean ret = FcoeClient::Write();
    return ret ? `next : `abort;
}

// TODO - check whether a 'validate' is required

/**
 * Init
 **/
void InitServicesDialog (string id) {
    y2milestone( "Init services dialog" );
    
    map status_map = FcoeClient::GetStartStatus();

    if ( status_map["fcoe"]:false == true )
    {
	UI::ChangeWidget( `id( "fcoe_startup_auto" ), `Value, true );
	UI::ChangeWidget( `id( "fcoe_startup_manual" ), `Value, false );
    }
    else
    {
	UI::ChangeWidget( `id( "fcoe_startup_auto" ), `Value, false );
	UI::ChangeWidget( `id( "fcoe_startup_manual" ), `Value, true );	
    }

    if ( status_map["lldpad"]:false == true )
    {
	UI::ChangeWidget( `id( "lldpad_startup_auto" ), `Value, true );
	UI::ChangeWidget( `id( "lldpad_startup_manual" ), `Value, false );
    }
    else
    {
	UI::ChangeWidget( `id( "lldpad_startup_auto" ), `Value, false );
	UI::ChangeWidget( `id( "lldpad_startup_manual" ), `Value, true );	
    }
}

//
// Adjust buttons, means set 'Change Settings' and 'Create VLAN' sensitive or insensitive
//
void AdjustButtons()
{
    map card = FcoeClient::GetCurrentNetworkCard();

    // check VLAN status 
    if ( card["fcoe_vlan"]:"" == FcoeClient::NOT_CONFIGURED )
    {
	UI::ChangeWidget( `id(`edit), `Enabled, false );
	UI::ChangeWidget( `id(`create), `Enabled, true );
    }
    else if ( card["fcoe_vlan"]:"" == FcoeClient::NOT_AVAILABLE )
    {
	UI::ChangeWidget( `id(`edit), `Enabled, false );
	UI::ChangeWidget( `id(`create), `Enabled, false );	
    }
    else
    {
	UI::ChangeWidget( `id(`edit), `Enabled, true );
	UI::ChangeWidget( `id(`create), `Enabled, false );
    }
}


void InitInterfacesDialog (string id) {
    y2milestone( "Init interfaces dialog" );
    string vlan_interface = "";
    integer row = 0;
    
    list <map> netcards = FcoeClient::GetNetworkCards();
    y2milestone( "Got netcards: %1", netcards );
    
    list <term> table_items = [];
    
    foreach ( map card, (list<map>)netcards, {
	    table_items = add( table_items,
			       `item(`id(row), card["dev_name"]:"", card["device"]:"", card["fcoe_vlan"]:"",
				     card["dcb_capable"]:"", card["fcoe_enable"]:"", card["dcb_required"]:"" )
			       );
	    row = row + 1;
	});
	      
    UI::ChangeWidget( `id(`interfaces), `Items, table_items );
    // set current item 
    UI::ChangeWidget( `id(`interfaces), `CurrentItem, `id(0) );
    FcoeClient::current_card = 0;
    
    AdjustButtons();
}

//
//
//
void InitConfigurationDialog (string id) {
    y2milestone( "Init configuration dialog" );

    map <string, string> fcoe_config = FcoeClient::GetFcoeConfig();
    y2milestone( "Fcoe configuration %1", fcoe_config  );

    if ( fcoe_config!= $[] )
    {	
	if ( fcoe_config["DEBUG"]:"" == "yes" )
	    UI::ChangeWidget(`id("debug"), `Value, "yes" );
	else
	    UI::ChangeWidget(`id("debug"), `Value, "no" );

	if ( fcoe_config["USE_SYSLOG"]:"" == "yes" )
	    UI::ChangeWidget(`id("syslog"), `Value, "yes" );
	else
	    UI::ChangeWidget(`id("syslog"), `Value, "no" );   
    }
}

//
// InitEditDialog
//
void InitEditDialog( string id )
{
    y2milestone( "Init edit dialog" );
    list <map> cards = FcoeClient::GetNetworkCards();
    map card = cards[FcoeClient::current_card]:$[];

    // set values for 'FCoE Enabled' and 'DCB Required'
    UI::ChangeWidget( `id(`fcoe), `Value, card["fcoe_enable"]:"" );
    UI::ChangeWidget( `id(`dcb), `Value, card["dcb_required"]:"" );
    UI::ChangeWidget( `id(`heading), `Value, sformat( _("Configuration of Interface %1"), card["fcoe_vlan"]:"" ) );
}

/**
 * Handle
 **/
symbol HandleServicesDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleInterfacesDialog( string id, map event )
{
     any action = event["ID"]:nil;

     y2milestone( "Event: %1", event );
     
     if ( action == `edit )
     {
	 y2milestone( "Action: %1, returning %1", action);
	 return `edit;
     }
     else if ( action == `interfaces )
     {
	 FcoeClient::current_card = (integer)UI::QueryWidget( `id(`interfaces), `CurrentItem );
	 AdjustButtons();
     }
     else if ( action == `create )
     {
	 map card = FcoeClient::GetCurrentNetworkCard();
	 string dev_name = card["dev_name"]:"";
	 boolean ret = Popup::YesNoHeadline( _("Creating and starting FCoE on detected VLAN device"),
					     sformat( _("Do you really want to create a FCoE network
interface for discovered FCoE VLAN interface
on %1 and start the FCoE initiator?"), dev_name ) );
	 if ( ret == true )
	 {
	     string vlan_interface = "";
	     string fcoe_vlan_interface = "";
	     map status_map = $[];
	     // create and start FCoE with 'fipvlan -c -s eth3'
	     // revert this (in case of 'Abort') with 'vconfig rem eth3.200'
	     string command = sformat( "fipvlan -c -s %1", dev_name );
	     y2milestone( "Executing command: %1", command );
	     map output = (map)SCR::Execute( .target.bash_output, command );
	     y2milestone( "Output: %1", output );

	     if ( output["exit"]:255 == 0 )
	     {
		 // Get new status and exchange list (table) entry
		 vlan_interface = FcoeClient::GetVlanInterface( card["dev_name"]:"" );
		 if ( vlan_interface == "" )
		 {
		     fcoe_vlan_interface = FcoeClient::NOT_AVAILABLE;
		 }
		 else
		 {
		     fcoe_vlan_interface = FcoeClient::GetFcoeVlanInterface( card["dev_name"]:"", vlan_interface );

		     if ( fcoe_vlan_interface != "" )
			 status_map = FcoeClient::GetFCoEStatus( fcoe_vlan_interface );
		     else
			 fcoe_vlan_interface = FcoeClient::NOT_CONFIGURED;
		 }
		 y2milestone( "FCoE VLAN interface: %1", fcoe_vlan_interface );     
		 // set new value in global map network_interfaces
		 card["fcoe_vlan"] = fcoe_vlan_interface;
		 card["fcoe_enable"] = status_map["FCOE_ENABLE"]:"";
		 card["dcb_required"] = status_map["DCB_REQUIRED"]:"";
		 card["cfg_file"] = status_map["Filename"]:"";
		 card["modified"] = "yes";
		 
		 FcoeClient::SetNetworkCardsValue( FcoeClient::current_card, card );
		 y2milestone( "Current network interfaces: %1", FcoeClient::GetNetworkCards() );

		 // replace value in table 
		 UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 2), fcoe_vlan_interface );
		 UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 4), status_map["FCOE_ENABLE"]:"" );
		 UI::ChangeWidget( `id( `interfaces), `Cell( FcoeClient::current_card, 5), status_map["DCB_REQUIRED"]:"" );
		 AdjustButtons();
		 if ( fcoe_vlan_interface != "" )
		 {
		     // store command to be able to redo the creation of FCoE VLAN interface
		     // in case of abort
		     FcoeClient::AddRedoCommand( sformat("vconfig rem %1", fcoe_vlan_interface ) );
		 }
	     }
	     else
	     {
		 Popup::Error( sformat( _("Cannot create and start FCoE on %1"), dev_name ) ); 
	     }
	 }
	 else
	 {
	     y2milestone( "Creating VLAN interface canceled" );
	 }
     }

     return nil;
}

symbol HandleConfigurationDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

symbol HandleEditDialog( string id, map event )
{
     any action = event["ID"]:nil;
     return nil;
}

/**
 * Store
 **/

void StoreServicesDialog (string id, map event)
{
    y2milestone( "Store services dialog" );
    boolean fcoe_auto = (boolean)UI::QueryWidget( `id ("fcoe_startup_auto"), `Value );

    if ( fcoe_auto )
    {
	FcoeClient::SetStartStatus( "fcoe", true );
	y2milestone( "Setting auto start of FCoE to true");
    }

    boolean lldpad_auto = (boolean)UI::QueryWidget( `id ("lldpad_startup_auto"), `Value );

    if ( lldpad_auto )
    {
	FcoeClient::SetStartStatus( "lldpad", true );
	y2milestone( "Setting auto start of lldpad to true");
    }
}

void StoreInterfacesDialog (string id, map event)
{
    y2milestone( "Store interfaces dialog" );
}

void StoreConfigurationDialog (string id, map event)
{
    y2milestone( "Store configuration dialog" );
    string debug_val = (string)UI::QueryWidget( `id("debug"), `Value );
    string syslog_val = (string)UI::QueryWidget( `id("syslog"), `Value );
    FcoeClient::SetFcoeConfigValue( "DEBUG", debug_val );
    FcoeClient::SetFcoeConfigValue( "USE_SYSLOG", syslog_val );
}

void StoreEditDialog (string id, map event)
{
    y2milestone( "Store edit dialog" );
    
    map card = FcoeClient::GetCurrentNetworkCard();

    string fcoe_enabled = (string)UI::QueryWidget( `id(`fcoe), `Value );
    if ( card["fcoe_enable"]:"" != fcoe_enabled )
    {
	card["fcoe_enable"] = fcoe_enabled;
	card["modified"] = "yes";		// set modified to "yes"
    }

    string dcb_required = (string)UI::QueryWidget( `id(`dcb), `Value );
    if ( card["dcb_required"]:"" != dcb_required )
    {
	card["dcb_required"] = dcb_required;
	card["modified"] = "yes";		// set modified to "yes"
    }

    FcoeClient::SetNetworkCardsValue( FcoeClient::current_card, card );

    y2milestone( "Current data: %1", FcoeClient::GetNetworkCards() );
}

/* EOF */
}
